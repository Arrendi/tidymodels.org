---
title: "Model tuning via grid search"
tags: [rsample, parsnip, tune, yardstick]
categories: [model tuning]
type: learn-subsection
weight: 1
description: | 
  Choose hyperparameters for a model by training on a grid of many possible parameter values.
---

```{r setup, include = FALSE, message = FALSE, warning = FALSE}
source(here::here("content/learn/common.R"))
```
  
```{r load, include=FALSE}
library(tidymodels)
library(readr)
library(kernlab)
library(doMC)
registerDoMC(cores = parallel::detectCores())

pkgs <- c("tidymodels", "kernlab", "readr")

theme_set(theme_bw() + theme(legend.position = "top"))
```

## Introduction

`r req_pkgs(pkgs)`

This article demonstrates how to tune a model using grid search. Many models have **hyperparameters** that can't be learned directly from a single data set when training the model. Instead, we can train many models in a grid of possible hyperparameter values and see which ones turn out best. 

## Example data

To demonstrate model tuning, we'll use the Ionosphere data from the UCI Machine Learning database. 

> This radar data was collected by a system in Goose Bay, Labrador. This system consists of a phased array of 16 high-frequency antennas with a total transmitted power on the order of 6.4 kilowatts. See the paper for more details. The targets were free electrons in the ionosphere. "good" radar returns are those showing evidence of some type of structure in the ionosphere. "bad" returns are those that do not; their signals pass through the ionosphere.

> Received signals were processed using an autocorrelation function whose arguments are the time of a pulse and the pulse number. There were 17 pulse numbers for the Goose Bay system. Instances in this databse are described by 2 attributes per pulse number, corresponding to the complex values returned by the function resulting from the complex electromagnetic signal. See cited below for more details.

There are 34 predictors and a factor outcome. The predictors have been scaled to a range of -1 to 1. The second predictor has a single unique value (of zero) and was excluded from these data. 

Let's read the data into R, which we'll do by providing [`readr::read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) with a url where our CSV data is located ("<https://tidymodels.org/learn/work/tune-svm/ionosphere.csv>"):


```{r read-data}
library(tidymodels)
library(readr)

ionosphere <- 
  read_csv("https://tidymodels.org/learn/work/tune-svm/ionosphere.csv")  %>% 
  mutate(class = factor(class))
```


## Inputs for the search

To demonstrate, we'll fit a radial basis function support vector machine to these data and tune the SVM cost parameter and the $\sigma$ parameter in the kernel function:

```{r svm-mod}
svm_mod <-
  svm_rbf(cost = tune(), rbf_sigma = tune()) %>%
  set_mode("classification") %>%
  set_engine("kernlab")
```

The only other required item for tuning is a resampling strategy as defined by an rsample object. Let's demonstrate using basic bootstrapping:

```{r rs}
set.seed(4943)
iono_rs <- bootstraps(ionosphere, times = 30)
```

## Optional inputs

An _optional_ step for model tuning is to specify which metrics should be computed using the out-of-sample predictions. For classification, the default is to calculate the log-likelihood statistic and overall accuracy. Instead of the defaults, the area under the ROC curve will be used. To do this, a yardstick package function can be used to create a metric set:

```{r roc}
roc_vals <- metric_set(roc_auc)
```

If no grid or parameters are provided, a set of 10 hyperparameters are created using a space-filling design (via a Latin hypercube). A grid can be given in a data frame where the parameters are in columns and parameter combinations are in rows. Here, the default will be used.

Also, a control object can be passed that specifies different aspects of the search. Here, the verbose option is turned off. 

```{r ctrl}
ctrl <- control_grid(verbose = FALSE)
```

Since the predictors are on the same scale, we can use the formula interface:

```{r grid}
set.seed(35)
formula_res <-
  svm_mod %>% 
  tune_grid(
    class ~ .,
    resamples = iono_rs,
    metrics = roc_vals,
    control = ctrl
  )
formula_res
```

The `.metrics` column contains tibbles of the performance metrics for each tuning parameter combination:

```{r raw-metrics}
formula_res %>% 
  select(.metrics) %>% 
  slice(1) %>% 
  pull(1)
```

To get the final resampling estimates, the `collect_metrics()` function can be used on the grid object:

```{r metric-estimates}
estimates <- collect_metrics(formula_res)
estimates
```

The top combinations are:

```{r sorted-metrics}
show_best(formula_res, metric = "roc_auc")
```


## Session information

```{r si, echo = FALSE}
small_session(pkgs)
```
